---
import 'chota';
import 'katex/dist/katex.min.css';
import '@fontsource/ibm-plex-sans-jp/400.css';
import '@fontsource/ibm-plex-sans-jp/700.css';
import '@fontsource/ibm-plex-mono';
import '@fontsource-variable/noto-sans-jp';

interface Props {
  title: string;
  og_description?: string;
  og_image?: string;
  og_title?: string;
  og_locale?: string;
}

const { title } = Astro.props;
const og_description = Astro.props.og_description;
const og_image = Astro.props.og_image ?? '/ogp.png';
const og_title = Astro.props.og_title ?? title;
const og_locale = Astro.props.og_locale ?? 'ja_JP';

type NavItem = {
  url: string;
  text: string;
  active: boolean;
};

const currentPath = Astro.url.pathname;
const navItems: NavItem[] = [
  ['/', 'Home'],
  ['/profile/', 'Profile'],
  ['/works/', 'Works'],
  ['/apps/', 'ウェブアプリ'],
  ['/monitor/', '定点観測'],
].map(([url, text]) => ({
  url,
  text,
  active:
    (url.length === 1 && currentPath === url) ||
    (url.length > 1 && currentPath.startsWith(url)),
}));
---

<!doctype html>
<html lang="ja">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />

    <link rel="apple-touch-icon" href="/apple-touch-icon-180x180.png">
    <link rel="icon" href="/favicon.ico">
    <link rel="icon" href="/icon-512x512.png">
    <link rel="sitemap" href="/sitemap-index.xml" />

    {og_description && <meta name="description" content={og_description}>}
    {og_description && <meta property="og:description" content={og_description}>}
    <meta property="og:image" content={og_image}>
    <meta property="og:title" content={og_title}>
    <meta property="og:locale" content={og_locale}>
		<meta name="generator" content={Astro.generator} />
		<title>{title} - yuma14.net</title>
	</head>
	<body class="newyear">
    <header>
      <nav class="nav">
        <div class="nav-left">
          <a class="brand" href="/">yuma14.net</a>
          <div class="tabs wide-menu">
            {navItems.map(item => 
              <a href={item.url} class={item.active ? "active" : ""}>{item.text}</a>
            )}
          </div>
        </div>
      </nav>
    </header>
    <main>
      <slot />
    </main>
    <footer>
      <div class="narrow-menu">
        <hr />
        {navItems.map(item => 
          <div class="item"><a href={item.url} class={item.active ? "active" : ""}>{item.text}</a></div>
        )}
      </div>
    </footer>
    <canvas id='snow'></canvas>
	</body>
</html>

<script is:inline>
  const count = Math.max(10, Math.floor(window.innerWidth * window.innerHeight / 20000));
  const wind_x = 0.0;
  const period = 30;
  const canvas = document.getElementById('snow');
  const ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  function on_canvas_resize() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  window.addEventListener('resize', on_canvas_resize);

  function rand(min, max) {
    return Math.random() * (max - min + 1) + min;
  }

  function genSnow() {
    return {
      x: rand(0, canvas.width),
      y: rand(0, canvas.height),
      size: rand(2, 5),
      d: rand(0, Math.PI),
    };
  }

  const path = new Path2D();
  path.arc(0, 0, 1, 0, Math.PI * 2);

  const grad = ctx.createRadialGradient(0, 0, 0.5, 0, 0, 1.0);
  grad.addColorStop(0.0, '#DDF6FFCC');
  grad.addColorStop(0.5, '#DDF6FF33');
  grad.addColorStop(1.0, '#DDF6FF11');

  function drawSnow(snow) {
    ctx.fillStyle = grad;
    ctx.translate(snow.x, snow.y);
    ctx.scale(snow.size, snow.size);
    ctx.fill(path);
    ctx.resetTransform();
  }

  function moveSnow(snow, deltaTime) {
    snow.x +=
      wind_x * snow.size * 0.5 +
      Math.sin(snow.y / period + snow.d) / snow.size;
    snow.y += snow.size * deltaTime * 0.01;

    if (snow.y > canvas.height) {
      snow.x = rand(0, canvas.width);
      snow.y = 0;
    }
  }

  const snows = [];
  for (let i = 0; i < count; i++) {
    snows.push(genSnow());
  }

  let prevTime = window.performance.now();
  function frame() {
    const currentTime = window.performance.now();
    const deltaTime = currentTime - prevTime;
    prevTime = currentTime;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for (let i = 0; i < count; i++) {
      drawSnow(snows[i]);
    }
    for (let i = 0; i < count; i++) {
      moveSnow(snows[i], deltaTime);
    }
    window.requestAnimationFrame(frame);
  }
  window.requestAnimationFrame(frame);
</script>

<style>
main {
  padding-left: 15px;
  padding-right: 15px;
  margin-left: auto;
  margin-right: auto;
}
@media (min-width: 576px) {
  main {
    max-width: 540px;
  }
}
@media (min-width: 768px) {
  main {
    max-width: 720px;
  }
}
@media (min-width: 992px) {
  main {
    max-width: 960px;
  }
}
@media (min-width: 1200px) {
  main {
    max-width: 1140px;
  }
}

header {
  position: sticky;
  top: 0;
  z-index: 99;
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  border-bottom: solid 1px #ffffff;
  background-color: #ffffff80;
  height: var(--header-height);
}
body.newyear header {
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  border-bottom: solid 1px #000000;
  background-color: #00000080;
}
.narrow-menu {
  display: none;
}
@media (max-width: 720px) {
  .wide-menu {
    display: none;
  }
  .narrow-menu {
    display: block;
  }
}
.brand {
  font-family: 'IBM Plex Mono', monospace;
}

footer {
  min-height: 50px;
  text-align: center;
}
.narrow-menu {
  padding-bottom: 50px;
}
.narrow-menu .item {
  position: relative;
  width: 100%;
  height: 30px;
}
.narrow-menu .item a {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

#snow {
  position: fixed;
  top: 0;
  left: 0;
  background: transparent;
  width: 100%;
  height: 100%;
  z-index: -1;
}
</style>

<style is:global>
img:not(.manual) {
  height: auto;
  max-width: min(700px, 100%);
}
h1, h2, h3, h4, h5, h6 {
  font-family: 'IBM Plex Sans JP', sans-serif;
}
:root {
  --font-family-sans: 'Noto Sans JP Variable', sans-serif;
  --font-family-mono: 'IBM Plex Mono', monospace;
  --header-height: 5rem;
}
pre {
  line-height: 1.2;
}
main a:not(main h2 a) {
  text-decoration: underline;
}
q {
  quotes: "“" "”" "‘" "’";
}

body.newyear {
  --bg-color: #090a0c;
  --bg-secondary-color: #0c0c09;
  --color-primary: #1CB86D;
  --color-lightGrey: #2d2922;
  --accent-color--color-grey: #8B897E;
  --color-darkGrey: #C0BEBB;
  --color-error: #d43939;
  --color-success: #28bd14;
  --grid-maxWidth: 120rem;
  --grid-gutter: 2rem;
  --font-size: 1.6rem;
  --font-color: #ccc;
}
</style>
